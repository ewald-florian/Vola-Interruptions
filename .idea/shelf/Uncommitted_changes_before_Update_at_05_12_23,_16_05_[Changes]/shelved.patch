Index: label_volas_gui.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\nimport time\nimport sys\nimport random\nrandom.seed(42)\n\nimport pandas as pd\nimport numpy as np\n\nimport tkinter as tk\nfrom tkinter import Entry\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn\")\n\n# Get directory of this script to work with relative paths.\nscript_dir = os.path.dirname(os.path.realpath(__file__))\n\n\nclass SampleLabelerGUI(tk.Tk):\n    def __init__(self,\n                 sample_batch_number=1,\n                 shuffle_vola_batch=True,\n                 time_frame_seconds=600,\n                 display_news=True,\n                 # TODO: Wieviele Minuten anschauen?\n                 news_buffer=10,\n                 reset_result_file=False,\n                 verbose=True):\n        super().__init__()\n\n        self.data_dir = os.path.join(script_dir, \"vola_data_midpoints\")\n        self.target_dir = os.path.join(script_dir, \"labeled_data\")\n        self.news_dir = os.path.join(script_dir, \"news\", \"news_reduced.csv.gz\")\n        self.verbose = verbose\n        self.shuffle_vola_batch = shuffle_vola_batch\n        self.sample_batch_number = sample_batch_number\n        self.display_news = display_news\n        self.time_frame_seconds = time_frame_seconds\n        self.news_buffer = news_buffer\n        self.isin_mapping = pd.read_csv(\"utils/DAX40_ISIN_NAME.csv\",\n                                        index_col=[\"ISIN\"])\n        self.news_df = pd.read_csv(self.news_dir,\n                                   parse_dates=[\"TIMESTAMP_UTC\"])\n\n        if reset_result_file:\n            self._reset_result_file()\n        self.result_df = self._load_result_df()\n\n    def _reset_result_file(self):\n        \"\"\"\n        Reset result file \"label_result_file.csv\" by changing its filename.\n        The old file is not deleted but just renamed to:\n        \"_labeled_samples_\" + <current time> + \"csv\"\n        Hence, no data will be lost by the rest.\n        \"\"\"\n        result_file = os.path.join(self.target_dir, \"label_result_file.csv\")\n        current_time_str = time.strftime(\"%Y-%m-%d_%H-%M-%S\",\n                                         time.localtime())\n        filename = \"_labeled_samples_\" + current_time_str + \".csv\"\n        filepath = os.path.join(self.target_dir, filename)\n        os.rename(result_file, filepath)\n\n    def _load_result_df(self):\n        \"\"\"Load the existing label results into result_df and store the old\n        file under a different filename.\n        After the labeling process is complete, all old and new entries will\n        be stores to \"label_result_file.csv\".\n        \"\"\"\n        result_file = os.path.join(self.target_dir, \"label_result_file.csv\")\n        # Load Existing result file.\n        if os.path.exists(result_file):\n\n            # Load results from label_results_file.csv\n            result_df = pd.read_csv(result_file)\n\n            # Save the old version.\n            self._reset_result_file()\n\n            return result_df\n\n        else:\n            # If the file doesn't exist, create a new DataFrame\n            return pd.DataFrame(columns=['Filename', 'Label', 'Comment'])\n\n    def _load_vola_df(self, vola_filename):\n        \"\"\"\n        Load individual vola events.\n        :param vola_filename: name of csv file\n        :return vola_df: pd.DataFrame of vola event\n        \"\"\"\n        self.vola_filename = vola_filename\n        self.current_isin = vola_filename.split(\"_\")[0]\n        filepath = os.path.join(self.data_dir, vola_filename)\n        vola_df = pd.read_csv(filepath)\n        return vola_df\n\n    def _plot_vola(self, df, display_slopes=True):\n        \"\"\"\n        Create Plot of vola event.\n        :param df: vola dataframe\n        :return fig: matplotlib plot of midpoint time series\n        \"\"\"\n        # Assume that vola start is in the middle of the sample.\n        vola_start = (self.time_frame_seconds / 2)\n\n        pre_vola = df[df.index < vola_start]\n        post_vola = df[df.index >= vola_start]\n\n        # Fit a line through before_vola and after_vola\n        coeff_before = np.polyfit(pre_vola.index, pre_vola[\"Midpoint_Norm\"],1)\n        coeff_after = np.polyfit(post_vola.index, post_vola[\"Midpoint_Norm\"],1)\n\n        line_before = np.polyval(coeff_before, pre_vola.index)\n        line_after = np.polyval(coeff_after, post_vola.index)\n\n        fig, ax = plt.subplots(figsize=(8, 4))\n        ax.plot(df[\"Midpoint_Norm\"], label=\"Midpoint Norm\", color=\"b\")\n        ax.axvline(x=vola_start, color=\"r\", linestyle=\":\",\n                   linewidth=1, label=f\"Vola Start\")\n\n        if display_slopes:\n            ax.plot(pre_vola.index, line_before, linestyle=\"--\", color=\"g\",\n                    linewidth=1, label=\"Pre Vola Regression\")\n            ax.plot(post_vola.index, line_after, linestyle=\"--\", color=\"y\",\n                    linewidth=1, label=\"Post Vola Regression\")\n\n        ax.set_title(\"Vola Interruption\", fontsize=14)\n        ax.legend()\n\n        return fig\n\n    def _get_vola_info(self, df):\n        \"\"\"\n        Get stock name and vola start timestamp.\n        :param df: vola_df\n        :return info_text: info dict\n        \"\"\"\n        isin = self.current_isin\n        name = self.isin_mapping.loc[isin].NAME\n        vola_start_time = str(df.loc[(self.time_frame_seconds/2),\n                                    \"Date_Time\"]).split(\".\")[0]\n        info_dict = {\"Datetime\": vola_start_time,\n                     \"Company\": name}\n        return info_dict\n\n    def _get_news_info(self, df, number_of_news_displayed):\n        \"\"\"\n        Get infos from news around the vola event.\n        :param vola_start_time:\n        :param news_buffer:\n        :param number_of_news_displayed:\n        :return:\n        \"\"\"\n\n        news_dict = {}\n\n        name = self.isin_mapping.loc[self.current_isin].NAME\n        vola_start_time = str(df.loc[(self.time_frame_seconds / 2),\n                            \"Date_Time\"]).split(\".\")[0]\n\n        vola_start_time = pd.to_datetime(vola_start_time)\n        news_start_time = vola_start_time - pd.Timedelta(self.news_buffer, \"m\")\n        news_end_time = vola_start_time + pd.Timedelta(self.news_buffer, \"m\")\n\n        # filter news df\n        name_mask = (self.news_df[\"ENTITY_NAME\"] == name)\n        start_mask = (self.news_df[\"TIMESTAMP_UTC\"] > news_start_time)\n        end_mask = (self.news_df[\"TIMESTAMP_UTC\"] < news_end_time)\n        combined_masks = name_mask & start_mask & end_mask\n        filtered_news = self.news_df.loc[combined_masks]\n\n        # Count news.\n        news_dict[\"news count total\"] = len(filtered_news)\n        news_dict[\"news count pre\"] = len(filtered_news.loc[\n                            (self.news_df[\"TIMESTAMP_UTC\"] < news_start_time)])\n        news_dict[\"news count post\"] = len(filtered_news.loc[\n                        (self.news_df[\"TIMESTAMP_UTC\"] >= news_start_time)])\n\n        # Mean values.\n        news_dict[\"avg event sentiment\"] = round(\n            filtered_news[\"EVENT_SENTIMENT_SCORE\"].mean(), 2)\n        news_dict[\"avg similarity days\"] = round(\n            filtered_news[\"EVENT_SIMILARITY_DAYS\"].mean(), 2)\n        news_dict[\"avg event relevance\"] = round(\n            filtered_news[\"EVENT_RELEVANCE\"].mean(), 2)\n\n        # Individual news.\n        filtered_news = filtered_news.sort_values(by=\"EVENT_RELEVANCE\",\n                                                  ascending=False)\n        # Only keep unique event texts and drop NaN\n        unique_event_texts = list(\n            filtered_news[\"EVENT_TEXT\"].dropna().unique())\n        for i, event_text in enumerate(\n                unique_event_texts[:number_of_news_displayed]):\n            news_dict[f\"EVENT_TEXT: {i + 1}\"] = event_text\n\n        return news_dict\n\n    def _store_input(self, label: int, comment: str, exit: bool):\n        \"\"\"\n        Take input from tk widget and store to results_df.\n        :param label: int (Wanted / Unwanted)\n        :param comment: str\n        :param exit: bool, exit program if True\n        :return: None\n        \"\"\"\n        results = [self.vola_filename, label, comment]\n        self.result_df.loc[len(self.result_df)] = results\n\n        if exit:\n            self._exit_labeling()\n\n    def _save_results_to_csv(self):\n        \"\"\"\n        Store result df to csv file.\n        :return: None\n        \"\"\"\n        # Overwrite the file \"label_result_file.csv\".\n        filepath = os.path.join(self.target_dir, \"label_result_file.csv\")\n        self.result_df.to_csv(filepath, index=False)\n        if self.verbose:\n            print(f\"Results stored to: {filepath}\")\n\n    def _exit_labeling(self):\n        \"\"\"\n        Store results and end program.\n        :return: None\n        \"\"\"\n        self._save_results_to_csv()\n        if self.verbose:\n            print(\"Labelling Process Ended via Exit.\")\n        # Stop the programm.\n        sys.exit()\n\n    @staticmethod\n    def _create_widget(fig, info_text):\n        \"\"\"\n        Create tk widget for current sample.\n        :param fig: plt.figure\n        :param info_text: info dict\n        :return label_value: bool, label (wanted / unwanted)\n        :return comment_value: str, comment\n        :return exit_value: bool\n        \"\"\"\n        label_value = None\n        comment_value = None\n        exit_value = None\n\n        def on_wanted_click():\n            nonlocal label_value\n            label_value = 0\n            wanted_button.config(state=tk.DISABLED)\n            unwanted_button.config(state=tk.NORMAL)\n\n        def on_unwanted_click():\n            nonlocal label_value\n            label_value = 1\n            unwanted_button.config(state=tk.DISABLED)\n            wanted_button.config(state=tk.NORMAL)\n\n        def on_next_click():\n            nonlocal comment_value, exit_value\n            comment_value = comment_entry.get()\n            exit_value = False\n            canvas.get_tk_widget().destroy()\n            fig.clf()\n            plt.close(fig)\n            window.destroy()\n\n        def on_exit_click():\n            nonlocal exit_value\n            exit_value = True\n            canvas.get_tk_widget().destroy()\n            fig.clf()\n            plt.close(fig)\n            window.destroy()\n\n        # Create the main window\n        window = tk.Tk()\n        # window = tk.Toplevel()  # Use Toplevel instead of Tk\n        window.title(\"Vola Sample Label\")\n\n        # Display key-value pairs from the info_text dictionary\n        for key, value in info_text.items():\n            info_label = tk.Label(window, text=f\"{key}: {value}\", anchor=\"w\",\n                                  padx=10)\n            info_label.pack(side=\"top\", fill=\"both\")\n\n        # Create a canvas for the Matplotlib fig\n        canvas = FigureCanvasTkAgg(fig, master=window)\n        canvas_widget = canvas.get_tk_widget()\n        canvas_widget.pack(side=\"top\", fill=\"both\", expand=True)\n\n        # Create buttons and entry field below the plot\n        wanted_button = tk.Button(window, text=\"Wanted\",\n                                  command=on_wanted_click)\n        wanted_button.pack(side=\"left\", padx=10)\n\n        unwanted_button = tk.Button(window, text=\"Unwanted\",\n                                    command=on_unwanted_click)\n        unwanted_button.pack(side=\"left\", padx=10)\n\n        comment_label = tk.Label(window, text=\"Comment:\")\n        comment_label.pack(side=\"left\", padx=10)\n\n        comment_entry = Entry(window)\n        comment_entry.pack(side=\"left\", padx=10)\n\n        next_button = tk.Button(window, text=\"Next\", command=on_next_click)\n        next_button.pack(side=\"left\", padx=10)\n\n        exit_button = tk.Button(window, text=\"Exit\", command=on_exit_click)\n        exit_button.pack(side=\"left\", padx=10)\n\n        # Bind the window close event to on_exit_click\n        window.protocol(\"WM_DELETE_WINDOW\", on_exit_click)\n\n        # Run the main loop\n        window.mainloop()\n\n        return label_value, comment_value, exit_value\n\n    def _get_vola_sample_batch(self):\n        \"\"\"\n        Split all vola samples into several batches.\n        Return the selecte batch of samples.\n        :return vola_batch, list\n        \"\"\"\n        NUM_BATCHES = 10\n        all_vola_samples = [f for f in os.listdir(self.data_dir) if\n                            f.endswith('.csv.gz')]\n        avg_len = len(all_vola_samples) // NUM_BATCHES\n        remainder = len(all_vola_samples) % NUM_BATCHES\n        split_dict = {}\n        start = 0\n        for i in range(NUM_BATCHES):\n            end = start + avg_len + (1 if i < remainder else 0)\n            split_dict[i + 1] = all_vola_samples[start:end]\n            start = end\n        vola_batch = split_dict[self.sample_batch_number]\n\n        if self.shuffle_vola_batch:\n            random.shuffle(vola_batch)\n\n        return vola_batch\n\n    def run(self):\n        \"\"\"\n        Run program.\n        \"\"\"\n        vola_batch = self._get_vola_sample_batch()\n\n        for vola in vola_batch:\n\n            # Skip vola samples which are already labeled.\n            if vola in list(self.result_df[\"Filename\"]):\n                continue\n\n            try:\n                vola_df = self._load_vola_df(vola)\n                fig = self._plot_vola(vola_df)\n                display_dict = self._get_vola_info(vola_df)\n                # Add news info to display dict.\n                if self.display_news:\n                    news_dict = self._get_news_info(vola_df, 10)\n                    display_dict = {**display_dict, **news_dict}\n                label, comment, exit = self._create_widget(fig, display_dict)\n                self._store_input(label, comment, exit)\n\n                # Store results directly to csv.\n                self._save_results_to_csv()\n                # Load results from csv.\n                result_file = os.path.join(self.target_dir,\n                                           \"label_result_file.csv\")\n                self.result_df = pd.read_csv(result_file)\n\n\n\n            except Exception as e:\n                print(f\"Error processing {vola}: {e}\")\n\n        self._save_results_to_csv()\n\n    def __iter__(self):\n        pass\n\n    def __next__(self):\n        pass\n\n# Test Code\nif __name__ == '__main__':\n    sample_labeller_gui = SampleLabelerGUI(sample_batch_number=1)\n    sample_labeller_gui.run()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/label_volas_gui.py b/label_volas_gui.py
--- a/label_volas_gui.py	(revision 1cbffb6ee841ab3051ea827a2a5dedcc4aec0c02)
+++ b/label_volas_gui.py	(date 1701785075378)
@@ -11,7 +11,7 @@
 from tkinter import Entry
 from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
 import matplotlib.pyplot as plt
-plt.style.use("seaborn")
+#plt.style.use("seaborn")
 
 # Get directory of this script to work with relative paths.
 script_dir = os.path.dirname(os.path.realpath(__file__))
@@ -375,8 +375,6 @@
                                            "label_result_file.csv")
                 self.result_df = pd.read_csv(result_file)
 
-
-
             except Exception as e:
                 print(f"Error processing {vola}: {e}")
 
@@ -388,7 +386,8 @@
     def __next__(self):
         pass
 
+
 # Test Code
 if __name__ == '__main__':
-    sample_labeller_gui = SampleLabelerGUI(sample_batch_number=1)
+    sample_labeller_gui = SampleLabelerGUI(sample_batch_number=4)
     sample_labeller_gui.run()
Index: labeled_data/_labeled_samples_2023-12-04_16-33-17.csv
===================================================================
diff --git a/labeled_data/_labeled_samples_2023-12-04_16-33-17.csv b/labeled_data/_labeled_samples_2023-12-04_16-33-17.csv
deleted file mode 100644
--- a/labeled_data/_labeled_samples_2023-12-04_16-33-17.csv	(revision 1cbffb6ee841ab3051ea827a2a5dedcc4aec0c02)
+++ /dev/null	(revision 1cbffb6ee841ab3051ea827a2a5dedcc4aec0c02)
@@ -1,67 +0,0 @@
-Filename,Label,Comment
-DE0007236101_20221117T075635_20221117T082635.csv.gz,0.0,
-DE000A1EWWW0_20221014T092019_20221014T095019.csv.gz,0.0,
-DE0005810055_20200313T083437_20200313T090437.csv.gz,0.0,
-DE000ZAL1111_20220224T155300_20220224T162300.csv.gz,1.0,continous trend
-DE0005810055_20220311T111133_20220311T114133.csv.gz,0.0,interrupted trend
-DE000A0D9PT0_20211118T120248_20211118T123248.csv.gz,0.0,
-DE000A1EWWW0_20220802T101709_20220802T104709.csv.gz,0.0,
-DE0006062144_20200310T095832_20200310T102832.csv.gz,0.0,spike.
-DE0007037129_20210113T092334_20210113T095334.csv.gz,1.0,continous trend
-DE0006047004_20200312T132426_20200312T135426.csv.gz,,
-DE000A1EWWW0_20200219T080447_20200219T083447.csv.gz,0.0,
-DE0005439004_20221117T103309_20221117T110309.csv.gz,1.0,
-DE0007664039_20211021T125629_20211021T132629.csv.gz,0.0,
-DE0005810055_20200313T144300_20200313T151300.csv.gz,0.0,
-DE000A1EWWW0_20200313T080429_20200313T083429.csv.gz,0.0,
-DE0006062144_20221025T083420_20221025T090420.csv.gz,0.0,
-DE0005140008_20210204T075811_20210204T082811.csv.gz,1.0,
-DE0006062144_20200309T082019_20200309T085019.csv.gz,,
-NL0012169213_20220104T091955_20220104T094955.csv.gz,0.0,
-DE0006599905_20200312T132351_20200312T135351.csv.gz,0.0,
-DE0008404005_20200319T151028_20200319T154028.csv.gz,0.0,
-DE000ZAL1111_20220722T082412_20220722T085412.csv.gz,1.0,
-DE0007100000_20221116T112747_20221116T115747.csv.gz,0.0,
-DE0008404005_20200730T083014_20200730T090014.csv.gz,1.0,
-DE0005785604_20200313T143638_20200313T150638.csv.gz,1.0,
-DE000A1EWWW0_20220826T142342_20220826T145342.csv.gz,0.0,
-DE000A0D9PT0_20201022T081414_20201022T084414.csv.gz,0.0,
-DE0007165631_20221019T082505_20221019T085505.csv.gz,0.0,
-DE0008430026_20220311T111124_20220311T114124.csv.gz,1.0,
-DE0006062144_20200312T142145_20200312T145145.csv.gz,0.0,
-DE0007165631_20220913T134652_20220913T141652.csv.gz,0.0,
-DE0007100000_20220905T145630_20220905T152630.csv.gz,0.0,
-DE0006062144_20190606T093102_20190606T100102.csv.gz,1.0,
-DE0006062144_20221003T085557_20221003T092557.csv.gz,1.0,
-DE0007037129_20220315T085645_20220315T092645.csv.gz,0.0,
-DE000ENAG999_20221019T083746_20221019T090746.csv.gz,0.0,
-DE0007164600_20200903T144954_20200903T151954.csv.gz,1.0,
-DE0005140008_20200302T155955_20200302T162955.csv.gz,0.0,
-DE000A0D9PT0_20200505T093340_20200505T100340.csv.gz,0.0,
-DE000BASF111_20220228T083854_20220228T090854.csv.gz,0.0,
-DE000A0D9PT0_20210719T072046_20210719T075046.csv.gz,0.0,
-NL0000235190_20200326T141726_20200326T144726.csv.gz,0.0,
-DE000SYM9999_20200319T152812_20200319T155812.csv.gz,0.0,
-DE000A1EWWW0_20190808T132057_20190808T135057.csv.gz,1.0,
-DE0006231004_20200316T110903_20200316T113903.csv.gz,1.0,
-NL0000235190_20200325T142236_20200325T145236.csv.gz,0.0,
-DE0008402215_20200317T084210_20200317T091210.csv.gz,0.0,
-DE0007664039_20200310T133711_20200310T140711.csv.gz,0.0,
-NL0000235190_20200312T132743_20200312T135743.csv.gz,0.0,
-DE0007100000_20220919T145146_20220919T152146.csv.gz,0.0,
-DE0005439004_20220316T103727_20220316T110727.csv.gz,0.0,
-DE0008430026_20200323T130820_20200323T133820.csv.gz,0.0,
-DE0005439004_20200305T081622_20200305T084622.csv.gz,0.0,
-DE0007037129_20191114T080447_20191114T083447.csv.gz,1.0,
-DE0005140008_20190815T124206_20190815T131206.csv.gz,0.0,
-DE0007165631_20221013T150707_20221013T153707.csv.gz,1.0,
-DE000BAY0017_20220830T143335_20220830T150335.csv.gz,0.0,
-DE0005439004_20200313T095454_20200313T102454.csv.gz,1.0,
-DE000SHL1006_20200318T134342_20200318T141342.csv.gz,0.0,
-DE000CBK1001_20210512T065242_20210512T072242.csv.gz,0.0,
-DE0006062144_20220721T082325_20220721T085325.csv.gz,0.0,
-NL0000235190_20220301T152619_20220301T155619.csv.gz,1.0,
-DE0007236101_20220311T111135_20220311T114135.csv.gz,0.0,
-DE000ZAL1111_20220624T122558_20220624T125558.csv.gz,1.0,
-DE000A0D9PT0_20200319T083018_20200319T090018.csv.gz,0.0,
-DE0005557508_20200320T145614_20200320T152614.csv.gz,0.0,
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"tensorflow\" project-jdk-type=\"Python SDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 1cbffb6ee841ab3051ea827a2a5dedcc4aec0c02)
+++ b/.idea/misc.xml	(date 1701785085943)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="tensorflow" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="$USER_HOME$/anaconda3/envs/label2" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: .idea/LabelVolas.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"PYTHON_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\" />\n    <orderEntry type=\"jdk\" jdkName=\"tensorflow\" jdkType=\"Python SDK\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/LabelVolas.iml b/.idea/LabelVolas.iml
--- a/.idea/LabelVolas.iml	(revision 1cbffb6ee841ab3051ea827a2a5dedcc4aec0c02)
+++ b/.idea/LabelVolas.iml	(date 1701785085948)
@@ -2,7 +2,7 @@
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="tensorflow" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="$USER_HOME$/anaconda3/envs/label2" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
Index: utils/check_samples.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/utils/check_samples.ipynb b/utils/check_samples.ipynb
new file mode 100644
--- /dev/null	(date 1701785085937)
+++ b/utils/check_samples.ipynb	(date 1701785085937)
@@ -0,0 +1,224 @@
+{
+ "cells": [
+  {
+   "cell_type": "code",
+   "execution_count": 1,
+   "metadata": {
+    "collapsed": true,
+    "ExecuteTime": {
+     "end_time": "2023-12-05T12:20:02.014110Z",
+     "start_time": "2023-12-05T12:20:02.005759Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "file = \"DE000BAY0017_20200525T092308_20200525T095308.csv.gz\""
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 4,
+   "outputs": [],
+   "source": [
+    "import pandas as pd"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2023-12-05T12:20:09.982539Z",
+     "start_time": "2023-12-05T12:20:09.544234Z"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 5,
+   "outputs": [],
+   "source": [
+    "path = \"/Users/florianewald/Documents/CodingProjects/LabelVolas/vola_data_midpoints/\""
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2023-12-05T12:20:12.967237Z",
+     "start_time": "2023-12-05T12:20:12.963820Z"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 9,
+   "outputs": [
+    {
+     "ename": "FileNotFoundError",
+     "evalue": "[Errno 2] No such file or directory: '/Users/florianewald/Documents/CodingProjects/LabelVolas/vola_data_midpointsDE000BAY0017_20200525T092308_20200525T095308.csv.gz'",
+     "output_type": "error",
+     "traceback": [
+      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[0;31mFileNotFoundError\u001B[0m                         Traceback (most recent call last)",
+      "Cell \u001B[0;32mIn[9], line 1\u001B[0m\n\u001B[0;32m----> 1\u001B[0m \u001B[43mpd\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mread_csv\u001B[49m\u001B[43m(\u001B[49m\u001B[43mpath\u001B[49m\u001B[38;5;241;43m+\u001B[39;49m\u001B[43mfile\u001B[49m\u001B[43m)\u001B[49m\n",
+      "File \u001B[0;32m~/miniconda3/envs/tensorflow/lib/python3.10/site-packages/pandas/io/parsers/readers.py:912\u001B[0m, in \u001B[0;36mread_csv\u001B[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001B[0m\n\u001B[1;32m    899\u001B[0m kwds_defaults \u001B[38;5;241m=\u001B[39m _refine_defaults_read(\n\u001B[1;32m    900\u001B[0m     dialect,\n\u001B[1;32m    901\u001B[0m     delimiter,\n\u001B[0;32m   (...)\u001B[0m\n\u001B[1;32m    908\u001B[0m     dtype_backend\u001B[38;5;241m=\u001B[39mdtype_backend,\n\u001B[1;32m    909\u001B[0m )\n\u001B[1;32m    910\u001B[0m kwds\u001B[38;5;241m.\u001B[39mupdate(kwds_defaults)\n\u001B[0;32m--> 912\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43m_read\u001B[49m\u001B[43m(\u001B[49m\u001B[43mfilepath_or_buffer\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mkwds\u001B[49m\u001B[43m)\u001B[49m\n",
+      "File \u001B[0;32m~/miniconda3/envs/tensorflow/lib/python3.10/site-packages/pandas/io/parsers/readers.py:577\u001B[0m, in \u001B[0;36m_read\u001B[0;34m(filepath_or_buffer, kwds)\u001B[0m\n\u001B[1;32m    574\u001B[0m _validate_names(kwds\u001B[38;5;241m.\u001B[39mget(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mnames\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;28;01mNone\u001B[39;00m))\n\u001B[1;32m    576\u001B[0m \u001B[38;5;66;03m# Create the parser.\u001B[39;00m\n\u001B[0;32m--> 577\u001B[0m parser \u001B[38;5;241m=\u001B[39m \u001B[43mTextFileReader\u001B[49m\u001B[43m(\u001B[49m\u001B[43mfilepath_or_buffer\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwds\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    579\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m chunksize \u001B[38;5;129;01mor\u001B[39;00m iterator:\n\u001B[1;32m    580\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m parser\n",
+      "File \u001B[0;32m~/miniconda3/envs/tensorflow/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1407\u001B[0m, in \u001B[0;36mTextFileReader.__init__\u001B[0;34m(self, f, engine, **kwds)\u001B[0m\n\u001B[1;32m   1404\u001B[0m     \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39moptions[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mhas_index_names\u001B[39m\u001B[38;5;124m\"\u001B[39m] \u001B[38;5;241m=\u001B[39m kwds[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mhas_index_names\u001B[39m\u001B[38;5;124m\"\u001B[39m]\n\u001B[1;32m   1406\u001B[0m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mhandles: IOHandles \u001B[38;5;241m|\u001B[39m \u001B[38;5;28;01mNone\u001B[39;00m \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;01mNone\u001B[39;00m\n\u001B[0;32m-> 1407\u001B[0m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_engine \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_make_engine\u001B[49m\u001B[43m(\u001B[49m\u001B[43mf\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mengine\u001B[49m\u001B[43m)\u001B[49m\n",
+      "File \u001B[0;32m~/miniconda3/envs/tensorflow/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1661\u001B[0m, in \u001B[0;36mTextFileReader._make_engine\u001B[0;34m(self, f, engine)\u001B[0m\n\u001B[1;32m   1659\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mb\u001B[39m\u001B[38;5;124m\"\u001B[39m \u001B[38;5;129;01mnot\u001B[39;00m \u001B[38;5;129;01min\u001B[39;00m mode:\n\u001B[1;32m   1660\u001B[0m         mode \u001B[38;5;241m+\u001B[39m\u001B[38;5;241m=\u001B[39m \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mb\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m-> 1661\u001B[0m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mhandles \u001B[38;5;241m=\u001B[39m \u001B[43mget_handle\u001B[49m\u001B[43m(\u001B[49m\n\u001B[1;32m   1662\u001B[0m \u001B[43m    \u001B[49m\u001B[43mf\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1663\u001B[0m \u001B[43m    \u001B[49m\u001B[43mmode\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1664\u001B[0m \u001B[43m    \u001B[49m\u001B[43mencoding\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43moptions\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mget\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[38;5;124;43mencoding\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;28;43;01mNone\u001B[39;49;00m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1665\u001B[0m \u001B[43m    \u001B[49m\u001B[43mcompression\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43moptions\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mget\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[38;5;124;43mcompression\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;28;43;01mNone\u001B[39;49;00m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1666\u001B[0m \u001B[43m    \u001B[49m\u001B[43mmemory_map\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43moptions\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mget\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[38;5;124;43mmemory_map\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;28;43;01mFalse\u001B[39;49;00m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1667\u001B[0m \u001B[43m    \u001B[49m\u001B[43mis_text\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mis_text\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1668\u001B[0m \u001B[43m    \u001B[49m\u001B[43merrors\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43moptions\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mget\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[38;5;124;43mencoding_errors\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[38;5;124;43mstrict\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1669\u001B[0m \u001B[43m    \u001B[49m\u001B[43mstorage_options\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43moptions\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mget\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[38;5;124;43mstorage_options\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;28;43;01mNone\u001B[39;49;00m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1670\u001B[0m \u001B[43m\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1671\u001B[0m \u001B[38;5;28;01massert\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mhandles \u001B[38;5;129;01mis\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m \u001B[38;5;28;01mNone\u001B[39;00m\n\u001B[1;32m   1672\u001B[0m f \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mhandles\u001B[38;5;241m.\u001B[39mhandle\n",
+      "File \u001B[0;32m~/miniconda3/envs/tensorflow/lib/python3.10/site-packages/pandas/io/common.py:753\u001B[0m, in \u001B[0;36mget_handle\u001B[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001B[0m\n\u001B[1;32m    749\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m compression \u001B[38;5;241m==\u001B[39m \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mgzip\u001B[39m\u001B[38;5;124m\"\u001B[39m:\n\u001B[1;32m    750\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28misinstance\u001B[39m(handle, \u001B[38;5;28mstr\u001B[39m):\n\u001B[1;32m    751\u001B[0m         \u001B[38;5;66;03m# error: Incompatible types in assignment (expression has type\u001B[39;00m\n\u001B[1;32m    752\u001B[0m         \u001B[38;5;66;03m# \"GzipFile\", variable has type \"Union[str, BaseBuffer]\")\u001B[39;00m\n\u001B[0;32m--> 753\u001B[0m         handle \u001B[38;5;241m=\u001B[39m \u001B[43mgzip\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mGzipFile\u001B[49m\u001B[43m(\u001B[49m\u001B[43m  \u001B[49m\u001B[38;5;66;43;03m# type: ignore[assignment]\u001B[39;49;00m\n\u001B[1;32m    754\u001B[0m \u001B[43m            \u001B[49m\u001B[43mfilename\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mhandle\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    755\u001B[0m \u001B[43m            \u001B[49m\u001B[43mmode\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mioargs\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mmode\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    756\u001B[0m \u001B[43m            \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mcompression_args\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    757\u001B[0m \u001B[43m        \u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    758\u001B[0m     \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[1;32m    759\u001B[0m         handle \u001B[38;5;241m=\u001B[39m gzip\u001B[38;5;241m.\u001B[39mGzipFile(\n\u001B[1;32m    760\u001B[0m             \u001B[38;5;66;03m# No overload variant of \"GzipFile\" matches argument types\u001B[39;00m\n\u001B[1;32m    761\u001B[0m             \u001B[38;5;66;03m# \"Union[str, BaseBuffer]\", \"str\", \"Dict[str, Any]\"\u001B[39;00m\n\u001B[0;32m   (...)\u001B[0m\n\u001B[1;32m    764\u001B[0m             \u001B[38;5;241m*\u001B[39m\u001B[38;5;241m*\u001B[39mcompression_args,\n\u001B[1;32m    765\u001B[0m         )\n",
+      "File \u001B[0;32m~/miniconda3/envs/tensorflow/lib/python3.10/gzip.py:174\u001B[0m, in \u001B[0;36mGzipFile.__init__\u001B[0;34m(self, filename, mode, compresslevel, fileobj, mtime)\u001B[0m\n\u001B[1;32m    172\u001B[0m     mode \u001B[38;5;241m+\u001B[39m\u001B[38;5;241m=\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mb\u001B[39m\u001B[38;5;124m'\u001B[39m\n\u001B[1;32m    173\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m fileobj \u001B[38;5;129;01mis\u001B[39;00m \u001B[38;5;28;01mNone\u001B[39;00m:\n\u001B[0;32m--> 174\u001B[0m     fileobj \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mmyfileobj \u001B[38;5;241m=\u001B[39m \u001B[43mbuiltins\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mopen\u001B[49m\u001B[43m(\u001B[49m\u001B[43mfilename\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mmode\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;129;43;01mor\u001B[39;49;00m\u001B[43m \u001B[49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43mrb\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[43m)\u001B[49m\n\u001B[1;32m    175\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m filename \u001B[38;5;129;01mis\u001B[39;00m \u001B[38;5;28;01mNone\u001B[39;00m:\n\u001B[1;32m    176\u001B[0m     filename \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mgetattr\u001B[39m(fileobj, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mname\u001B[39m\u001B[38;5;124m'\u001B[39m, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m'\u001B[39m)\n",
+      "\u001B[0;31mFileNotFoundError\u001B[0m: [Errno 2] No such file or directory: '/Users/florianewald/Documents/CodingProjects/LabelVolas/vola_data_midpointsDE000BAY0017_20200525T092308_20200525T095308.csv.gz'"
+     ]
+    }
+   ],
+   "source": [
+    "pd.read_csv(path+file)"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2023-12-05T12:21:12.358148Z",
+     "start_time": "2023-12-05T12:21:12.298612Z"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 10,
+   "outputs": [],
+   "source": [
+    "import os\n",
+    "os.chdir(\"/Users/florianewald/Documents/CodingProjects/LabelVolas/vola_data_midpoints/\")"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2023-12-05T12:21:39.525183Z",
+     "start_time": "2023-12-05T12:21:39.522499Z"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 11,
+   "outputs": [
+    {
+     "data": {
+      "text/plain": "'/Users/florianewald/Documents/CodingProjects/LabelVolas/vola_data_midpoints'"
+     },
+     "execution_count": 11,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "os.getcwd()"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2023-12-05T12:21:48.724848Z",
+     "start_time": "2023-12-05T12:21:48.719951Z"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 13,
+   "outputs": [],
+   "source": [
+    "df = pd.read_csv(\"DE000BAY0017_20200525T092308_20200525T095308.csv.gz\")"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2023-12-05T12:22:51.022809Z",
+     "start_time": "2023-12-05T12:22:51.017928Z"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 14,
+   "outputs": [
+    {
+     "data": {
+      "text/plain": "                    Date_Time  Midpoint_Norm\n0  2020-05-25 11:33:09.975422       0.000000\n1  2020-05-25 11:33:10.975422       0.550296\n2  2020-05-25 11:33:11.975422       0.550296\n3  2020-05-25 11:33:12.975422       0.526627\n4  2020-05-25 11:33:13.975422       0.532544",
+      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date_Time</th>\n      <th>Midpoint_Norm</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2020-05-25 11:33:09.975422</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2020-05-25 11:33:10.975422</td>\n      <td>0.550296</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2020-05-25 11:33:11.975422</td>\n      <td>0.550296</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2020-05-25 11:33:12.975422</td>\n      <td>0.526627</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2020-05-25 11:33:13.975422</td>\n      <td>0.532544</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
+     },
+     "execution_count": 14,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "df.head()"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2023-12-05T12:23:09.311354Z",
+     "start_time": "2023-12-05T12:23:09.307088Z"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 15,
+   "outputs": [
+    {
+     "data": {
+      "text/plain": "<Axes: >"
+     },
+     "execution_count": 15,
+     "metadata": {},
+     "output_type": "execute_result"
+    },
+    {
+     "data": {
+      "text/plain": "<Figure size 640x480 with 1 Axes>",
+      "image/png": ""
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "df[\"Midpoint_Norm\"].plot()"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2023-12-05T12:23:20.312612Z",
+     "start_time": "2023-12-05T12:23:19.940642Z"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [],
+   "metadata": {
+    "collapsed": false
+   }
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 2
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython2",
+   "version": "2.7.6"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 0
+}
Index: README.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>this is a little Python program to label vola interruptions manually.\n\nset sample_batch_number in label_volas_gui.py.\nto start labeling, execute the file \"label_volas_gui.py\".\n\nresults are stored to ../labeled_data/label_result_file.csv.\n\ndependencies: pandas, numpy, matplotlib.\n\nbatch list:\n-----------\nbatch 1: flo\nbatch 2: Niklas\nbatch 3\nbatch 4: flo\nbatch 5\nbatch 6\nbatch 7\nbatch 8\nbatch 9\nbatch 10\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.txt b/README.txt
--- a/README.txt	(revision 1cbffb6ee841ab3051ea827a2a5dedcc4aec0c02)
+++ b/README.txt	(date 1701785085908)
@@ -10,12 +10,12 @@
 batch list:
 -----------
 batch 1: flo
-batch 2: Niklas
+batch 2
 batch 3
-batch 4: flo
+batch 4
 batch 5
 batch 6
 batch 7
 batch 8
 batch 9
-batch 10
+batch 10
\ No newline at end of file
Index: labeled_data/label_result_file.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Filename,Label,Comment\nDE0007236101_20221117T075635_20221117T082635.csv.gz,0.0,\nDE000A1EWWW0_20221014T092019_20221014T095019.csv.gz,0.0,\nDE0005810055_20200313T083437_20200313T090437.csv.gz,0.0,\nDE000ZAL1111_20220224T155300_20220224T162300.csv.gz,1.0,continous trend\nDE0005810055_20220311T111133_20220311T114133.csv.gz,0.0,interrupted trend\nDE000A0D9PT0_20211118T120248_20211118T123248.csv.gz,0.0,\nDE000A1EWWW0_20220802T101709_20220802T104709.csv.gz,0.0,\nDE0006062144_20200310T095832_20200310T102832.csv.gz,0.0,spike.\nDE0007037129_20210113T092334_20210113T095334.csv.gz,1.0,continous trend\nDE0006047004_20200312T132426_20200312T135426.csv.gz,,\nDE000A1EWWW0_20200219T080447_20200219T083447.csv.gz,0.0,\nDE0005439004_20221117T103309_20221117T110309.csv.gz,1.0,\nDE0007664039_20211021T125629_20211021T132629.csv.gz,0.0,\nDE0005810055_20200313T144300_20200313T151300.csv.gz,0.0,\nDE000A1EWWW0_20200313T080429_20200313T083429.csv.gz,0.0,\nDE0006062144_20221025T083420_20221025T090420.csv.gz,0.0,\nDE0005140008_20210204T075811_20210204T082811.csv.gz,1.0,\nDE0006062144_20200309T082019_20200309T085019.csv.gz,,\nNL0012169213_20220104T091955_20220104T094955.csv.gz,0.0,\nDE0006599905_20200312T132351_20200312T135351.csv.gz,0.0,\nDE0008404005_20200319T151028_20200319T154028.csv.gz,0.0,\nDE000ZAL1111_20220722T082412_20220722T085412.csv.gz,1.0,\nDE0007100000_20221116T112747_20221116T115747.csv.gz,0.0,\nDE0008404005_20200730T083014_20200730T090014.csv.gz,1.0,\nDE0005785604_20200313T143638_20200313T150638.csv.gz,1.0,\nDE000A1EWWW0_20220826T142342_20220826T145342.csv.gz,0.0,\nDE000A0D9PT0_20201022T081414_20201022T084414.csv.gz,0.0,\nDE0007165631_20221019T082505_20221019T085505.csv.gz,0.0,\nDE0008430026_20220311T111124_20220311T114124.csv.gz,1.0,\nDE0006062144_20200312T142145_20200312T145145.csv.gz,0.0,\nDE0007165631_20220913T134652_20220913T141652.csv.gz,0.0,\nDE0007100000_20220905T145630_20220905T152630.csv.gz,0.0,\nDE0006062144_20190606T093102_20190606T100102.csv.gz,1.0,\nDE0006062144_20221003T085557_20221003T092557.csv.gz,1.0,\nDE0007037129_20220315T085645_20220315T092645.csv.gz,0.0,\nDE000ENAG999_20221019T083746_20221019T090746.csv.gz,0.0,\nDE0007164600_20200903T144954_20200903T151954.csv.gz,1.0,\nDE0005140008_20200302T155955_20200302T162955.csv.gz,0.0,\nDE000A0D9PT0_20200505T093340_20200505T100340.csv.gz,0.0,\nDE000BASF111_20220228T083854_20220228T090854.csv.gz,0.0,\nDE000A0D9PT0_20210719T072046_20210719T075046.csv.gz,0.0,\nNL0000235190_20200326T141726_20200326T144726.csv.gz,0.0,\nDE000SYM9999_20200319T152812_20200319T155812.csv.gz,0.0,\nDE000A1EWWW0_20190808T132057_20190808T135057.csv.gz,1.0,\nDE0006231004_20200316T110903_20200316T113903.csv.gz,1.0,\nNL0000235190_20200325T142236_20200325T145236.csv.gz,0.0,\nDE0008402215_20200317T084210_20200317T091210.csv.gz,0.0,\nDE0007664039_20200310T133711_20200310T140711.csv.gz,0.0,\nNL0000235190_20200312T132743_20200312T135743.csv.gz,0.0,\nDE0007100000_20220919T145146_20220919T152146.csv.gz,0.0,\nDE0005439004_20220316T103727_20220316T110727.csv.gz,0.0,\nDE0008430026_20200323T130820_20200323T133820.csv.gz,0.0,\nDE0005439004_20200305T081622_20200305T084622.csv.gz,0.0,\nDE0007037129_20191114T080447_20191114T083447.csv.gz,1.0,\nDE0005140008_20190815T124206_20190815T131206.csv.gz,0.0,\nDE0007165631_20221013T150707_20221013T153707.csv.gz,1.0,\nDE000BAY0017_20220830T143335_20220830T150335.csv.gz,0.0,\nDE0005439004_20200313T095454_20200313T102454.csv.gz,1.0,\nDE000SHL1006_20200318T134342_20200318T141342.csv.gz,0.0,\nDE000CBK1001_20210512T065242_20210512T072242.csv.gz,0.0,\nDE0006062144_20220721T082325_20220721T085325.csv.gz,0.0,\nNL0000235190_20220301T152619_20220301T155619.csv.gz,1.0,\nDE0007236101_20220311T111135_20220311T114135.csv.gz,0.0,\nDE000ZAL1111_20220624T122558_20220624T125558.csv.gz,1.0,\nDE000A0D9PT0_20200319T083018_20200319T090018.csv.gz,0.0,\nDE0005557508_20200320T145614_20200320T152614.csv.gz,0.0,\nDE0007165631_20220110T135004_20220110T142004.csv.gz,0.0,\nDE0007664039_20210602T100152_20210602T103152.csv.gz,0.0,\nDE0006062144_20220225T075850_20220225T082850.csv.gz,0.0,\nDE0005439004_20220215T091325_20220215T094325.csv.gz,0.0,\nDE0007664039_20220304T085817_20220304T092817.csv.gz,1.0,\nDE0008404005_20220308T075838_20220308T082838.csv.gz,1.0,\nDE000A0D9PT0_20200803T123349_20200803T130349.csv.gz,0.0,\nDE000A1EWWW0_20220128T110231_20220128T113231.csv.gz,1.0,\nDE0007165631_20211201T082808_20211201T085808.csv.gz,0.0,\nDE0006599905_20190910T100905_20190910T103905.csv.gz,0.0,\nDE000A0D9PT0_20220216T082106_20220216T085106.csv.gz,0.0,\nDE000ZAL1111_20221004T093749_20221004T100749.csv.gz,0.0,\nDE0007100000_20220106T102359_20220106T105359.csv.gz,0.0,\nDE000ENAG999_20200319T143805_20200319T150805.csv.gz,0.0,\nDE0007100000_20200528T084611_20200528T091611.csv.gz,0.0,difficult\nDE000ZAL1111_20211123T084745_20211123T091745.csv.gz,0.0,\nDE000PAH0038_20190515T140250_20190515T143250.csv.gz,0.0,\nDE000A1ML7J1_20220616T092748_20220616T095748.csv.gz,0.0,\nDE000A1EWWW0_20200319T104423_20200319T111423.csv.gz,0.0,difficult\nDE0007037129_20211015T140352_20211015T143352.csv.gz,0.0,\nDE000BASF111_20201109T115859_20201109T122859.csv.gz,0.0,\nDE0007165631_20220419T090202_20220419T093202.csv.gz,0.0,\nDE000CBK1001_20220623T074229_20220623T081229.csv.gz,0.0,\nDE0006047004_20200311T083304_20200311T090304.csv.gz,0.0,difficult\nDE0005439004_20190417T073125_20190417T080125.csv.gz,0.0,\nDE000BASF111_20200430T070052_20200430T073052.csv.gz,0.0,\nDE0005439004_20220714T135032_20220714T142032.csv.gz,1.0,\nDE0005140008_20190425T075809_20190425T082809.csv.gz,0.0,\nDE0007037129_20210128T113646_20210128T120646.csv.gz,1.0,\nDE0007037129_20220907T085224_20220907T092224.csv.gz,1.0,\nDE0007165631_20211130T091208_20211130T094208.csv.gz,0.0,\nDE0007165631_20211208T102151_20211208T105151.csv.gz,0.0,\nDE000A0D9PT0_20200429T124505_20200429T131505.csv.gz,0.0,\nDE000A1ML7J1_20220207T102620_20220207T105620.csv.gz,0.0,\nDE000BAY0017_20201110T145013_20201110T152013.csv.gz,1.0,difficult\nDE000CBK1001_20210211T082405_20210211T085405.csv.gz,0.0,\nDE000A0D9PT0_20200519T095958_20200519T102958.csv.gz,1.0,\nDE000SYM9999_20221013T123202_20221013T130202.csv.gz,0.0,\nDE000A0D9PT0_20200316T090924_20200316T093924.csv.gz,1.0,\nDE0007037129_20221024T103730_20221024T110730.csv.gz,1.0,\nDE0005557508_20220307T081536_20220307T084536.csv.gz,0.0,\nDE0005140008_20210611T070240_20210611T073240.csv.gz,0.0,\nDE000A0D9PT0_20200331T101736_20200331T104736.csv.gz,1.0,\nDE0005439004_20211025T131425_20211025T134425.csv.gz,0.0,difficult\nDE0007100000_20220624T071312_20220624T074312.csv.gz,0.0,\nDE000A0D9PT0_20210125T080402_20210125T083402.csv.gz,0.0,\nDE000A0D9PT0_20200303T082419_20200303T085419.csv.gz,0.0,\nDE0005439004_20200730T102646_20200730T105646.csv.gz,0.0,\nDE0005140008_20200131T145813_20200131T152813.csv.gz,0.0,\nDE0005140008_20220207T091934_20220207T094934.csv.gz,1.0,difficult\nDE000A1EWWW0_20190910T100159_20190910T103159.csv.gz,1.0,\nDE0005552004_20200313T132454_20200313T135454.csv.gz,0.0,\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/labeled_data/label_result_file.csv b/labeled_data/label_result_file.csv
--- a/labeled_data/label_result_file.csv	(revision 1cbffb6ee841ab3051ea827a2a5dedcc4aec0c02)
+++ b/labeled_data/label_result_file.csv	(date 1701786202589)
@@ -2,118 +2,45 @@
 DE0007236101_20221117T075635_20221117T082635.csv.gz,0.0,
 DE000A1EWWW0_20221014T092019_20221014T095019.csv.gz,0.0,
 DE0005810055_20200313T083437_20200313T090437.csv.gz,0.0,
-DE000ZAL1111_20220224T155300_20220224T162300.csv.gz,1.0,continous trend
-DE0005810055_20220311T111133_20220311T114133.csv.gz,0.0,interrupted trend
+DE000ZAL1111_20220224T155300_20220224T162300.csv.gz,0.0,
+DE0005810055_20220311T111133_20220311T114133.csv.gz,0.0,
 DE000A0D9PT0_20211118T120248_20211118T123248.csv.gz,0.0,
 DE000A1EWWW0_20220802T101709_20220802T104709.csv.gz,0.0,
-DE0006062144_20200310T095832_20200310T102832.csv.gz,0.0,spike.
-DE0007037129_20210113T092334_20210113T095334.csv.gz,1.0,continous trend
-DE0006047004_20200312T132426_20200312T135426.csv.gz,,
+DE0006062144_20200310T095832_20200310T102832.csv.gz,0.0,depends on slope
+DE0007037129_20210113T092334_20210113T095334.csv.gz,1.0,
+DE0006047004_20200312T132426_20200312T135426.csv.gz,0.0,
 DE000A1EWWW0_20200219T080447_20200219T083447.csv.gz,0.0,
 DE0005439004_20221117T103309_20221117T110309.csv.gz,1.0,
 DE0007664039_20211021T125629_20211021T132629.csv.gz,0.0,
 DE0005810055_20200313T144300_20200313T151300.csv.gz,0.0,
 DE000A1EWWW0_20200313T080429_20200313T083429.csv.gz,0.0,
 DE0006062144_20221025T083420_20221025T090420.csv.gz,0.0,
-DE0005140008_20210204T075811_20210204T082811.csv.gz,1.0,
-DE0006062144_20200309T082019_20200309T085019.csv.gz,,
-NL0012169213_20220104T091955_20220104T094955.csv.gz,0.0,
-DE0006599905_20200312T132351_20200312T135351.csv.gz,0.0,
-DE0008404005_20200319T151028_20200319T154028.csv.gz,0.0,
-DE000ZAL1111_20220722T082412_20220722T085412.csv.gz,1.0,
-DE0007100000_20221116T112747_20221116T115747.csv.gz,0.0,
-DE0008404005_20200730T083014_20200730T090014.csv.gz,1.0,
-DE0005785604_20200313T143638_20200313T150638.csv.gz,1.0,
-DE000A1EWWW0_20220826T142342_20220826T145342.csv.gz,0.0,
-DE000A0D9PT0_20201022T081414_20201022T084414.csv.gz,0.0,
-DE0007165631_20221019T082505_20221019T085505.csv.gz,0.0,
-DE0008430026_20220311T111124_20220311T114124.csv.gz,1.0,
-DE0006062144_20200312T142145_20200312T145145.csv.gz,0.0,
-DE0007165631_20220913T134652_20220913T141652.csv.gz,0.0,
-DE0007100000_20220905T145630_20220905T152630.csv.gz,0.0,
-DE0006062144_20190606T093102_20190606T100102.csv.gz,1.0,
-DE0006062144_20221003T085557_20221003T092557.csv.gz,1.0,
-DE0007037129_20220315T085645_20220315T092645.csv.gz,0.0,
-DE000ENAG999_20221019T083746_20221019T090746.csv.gz,0.0,
-DE0007164600_20200903T144954_20200903T151954.csv.gz,1.0,
-DE0005140008_20200302T155955_20200302T162955.csv.gz,0.0,
-DE000A0D9PT0_20200505T093340_20200505T100340.csv.gz,0.0,
-DE000BASF111_20220228T083854_20220228T090854.csv.gz,0.0,
-DE000A0D9PT0_20210719T072046_20210719T075046.csv.gz,0.0,
-NL0000235190_20200326T141726_20200326T144726.csv.gz,0.0,
-DE000SYM9999_20200319T152812_20200319T155812.csv.gz,0.0,
-DE000A1EWWW0_20190808T132057_20190808T135057.csv.gz,1.0,
-DE0006231004_20200316T110903_20200316T113903.csv.gz,1.0,
-NL0000235190_20200325T142236_20200325T145236.csv.gz,0.0,
-DE0008402215_20200317T084210_20200317T091210.csv.gz,0.0,
-DE0007664039_20200310T133711_20200310T140711.csv.gz,0.0,
-NL0000235190_20200312T132743_20200312T135743.csv.gz,0.0,
-DE0007100000_20220919T145146_20220919T152146.csv.gz,0.0,
-DE0005439004_20220316T103727_20220316T110727.csv.gz,0.0,
-DE0008430026_20200323T130820_20200323T133820.csv.gz,0.0,
-DE0005439004_20200305T081622_20200305T084622.csv.gz,0.0,
-DE0007037129_20191114T080447_20191114T083447.csv.gz,1.0,
-DE0005140008_20190815T124206_20190815T131206.csv.gz,0.0,
-DE0007165631_20221013T150707_20221013T153707.csv.gz,1.0,
-DE000BAY0017_20220830T143335_20220830T150335.csv.gz,0.0,
-DE0005439004_20200313T095454_20200313T102454.csv.gz,1.0,
-DE000SHL1006_20200318T134342_20200318T141342.csv.gz,0.0,
-DE000CBK1001_20210512T065242_20210512T072242.csv.gz,0.0,
-DE0006062144_20220721T082325_20220721T085325.csv.gz,0.0,
-NL0000235190_20220301T152619_20220301T155619.csv.gz,1.0,
-DE0007236101_20220311T111135_20220311T114135.csv.gz,0.0,
-DE000ZAL1111_20220624T122558_20220624T125558.csv.gz,1.0,
-DE000A0D9PT0_20200319T083018_20200319T090018.csv.gz,0.0,
-DE0005557508_20200320T145614_20200320T152614.csv.gz,0.0,
-DE0007165631_20220110T135004_20220110T142004.csv.gz,0.0,
-DE0007664039_20210602T100152_20210602T103152.csv.gz,0.0,
-DE0006062144_20220225T075850_20220225T082850.csv.gz,0.0,
-DE0005439004_20220215T091325_20220215T094325.csv.gz,0.0,
-DE0007664039_20220304T085817_20220304T092817.csv.gz,1.0,
-DE0008404005_20220308T075838_20220308T082838.csv.gz,1.0,
-DE000A0D9PT0_20200803T123349_20200803T130349.csv.gz,0.0,
-DE000A1EWWW0_20220128T110231_20220128T113231.csv.gz,1.0,
-DE0007165631_20211201T082808_20211201T085808.csv.gz,0.0,
-DE0006599905_20190910T100905_20190910T103905.csv.gz,0.0,
-DE000A0D9PT0_20220216T082106_20220216T085106.csv.gz,0.0,
-DE000ZAL1111_20221004T093749_20221004T100749.csv.gz,0.0,
-DE0007100000_20220106T102359_20220106T105359.csv.gz,0.0,
-DE000ENAG999_20200319T143805_20200319T150805.csv.gz,0.0,
-DE0007100000_20200528T084611_20200528T091611.csv.gz,0.0,difficult
-DE000ZAL1111_20211123T084745_20211123T091745.csv.gz,0.0,
-DE000PAH0038_20190515T140250_20190515T143250.csv.gz,0.0,
-DE000A1ML7J1_20220616T092748_20220616T095748.csv.gz,0.0,
-DE000A1EWWW0_20200319T104423_20200319T111423.csv.gz,0.0,difficult
-DE0007037129_20211015T140352_20211015T143352.csv.gz,0.0,
-DE000BASF111_20201109T115859_20201109T122859.csv.gz,0.0,
-DE0007165631_20220419T090202_20220419T093202.csv.gz,0.0,
-DE000CBK1001_20220623T074229_20220623T081229.csv.gz,0.0,
-DE0006047004_20200311T083304_20200311T090304.csv.gz,0.0,difficult
-DE0005439004_20190417T073125_20190417T080125.csv.gz,0.0,
-DE000BASF111_20200430T070052_20200430T073052.csv.gz,0.0,
-DE0005439004_20220714T135032_20220714T142032.csv.gz,1.0,
-DE0005140008_20190425T075809_20190425T082809.csv.gz,0.0,
-DE0007037129_20210128T113646_20210128T120646.csv.gz,1.0,
-DE0007037129_20220907T085224_20220907T092224.csv.gz,1.0,
-DE0007165631_20211130T091208_20211130T094208.csv.gz,0.0,
-DE0007165631_20211208T102151_20211208T105151.csv.gz,0.0,
-DE000A0D9PT0_20200429T124505_20200429T131505.csv.gz,0.0,
-DE000A1ML7J1_20220207T102620_20220207T105620.csv.gz,0.0,
-DE000BAY0017_20201110T145013_20201110T152013.csv.gz,1.0,difficult
-DE000CBK1001_20210211T082405_20210211T085405.csv.gz,0.0,
-DE000A0D9PT0_20200519T095958_20200519T102958.csv.gz,1.0,
-DE000SYM9999_20221013T123202_20221013T130202.csv.gz,0.0,
-DE000A0D9PT0_20200316T090924_20200316T093924.csv.gz,1.0,
-DE0007037129_20221024T103730_20221024T110730.csv.gz,1.0,
-DE0005557508_20220307T081536_20220307T084536.csv.gz,0.0,
-DE0005140008_20210611T070240_20210611T073240.csv.gz,0.0,
-DE000A0D9PT0_20200331T101736_20200331T104736.csv.gz,1.0,
-DE0005439004_20211025T131425_20211025T134425.csv.gz,0.0,difficult
-DE0007100000_20220624T071312_20220624T074312.csv.gz,0.0,
-DE000A0D9PT0_20210125T080402_20210125T083402.csv.gz,0.0,
-DE000A0D9PT0_20200303T082419_20200303T085419.csv.gz,0.0,
-DE0005439004_20200730T102646_20200730T105646.csv.gz,0.0,
-DE0005140008_20200131T145813_20200131T152813.csv.gz,0.0,
-DE0005140008_20220207T091934_20220207T094934.csv.gz,1.0,difficult
-DE000A1EWWW0_20190910T100159_20190910T103159.csv.gz,1.0,
-DE0005552004_20200313T132454_20200313T135454.csv.gz,0.0,
+DE0005140008_20210204T075811_20210204T082811.csv.gz,0.0,
+DE0007664039_20221107T084802_20221107T091802.csv.gz,0.0,
+DE000CBK1001_20220310T081430_20220310T084430.csv.gz,0.0,
+DE0007165631_20200323T083550_20200323T090550.csv.gz,0.0,
+DE0007100000_20200612T082430_20200612T085430.csv.gz,0.0,
+DE0007165631_20220210T142310_20220210T145310.csv.gz,0.0,
+DE0007037129_20220826T144435_20220826T151435.csv.gz,0.0,
+NL0000235190_20200318T110126_20200318T113126.csv.gz,0.0,
+DE0007664039_20220624T094941_20220624T101941.csv.gz,0.0,
+DE0006231004_20211109T102636_20211109T105636.csv.gz,,
+DE0006231004_20201028T105629_20201028T112629.csv.gz,0.0,
+DE0007164600_20221110T131858_20221110T134858.csv.gz,0.0,
+DE000ZAL1111_20220630T150412_20220630T153412.csv.gz,1.0,
+DE000A0D9PT0_20211118T131340_20211118T134340.csv.gz,1.0,
+DE0006231004_20211216T160631_20211216T163631.csv.gz,0.0,
+DE000ZAL1111_20211103T075250_20211103T082250.csv.gz,0.0,
+DE000A1ML7J1_20220512T075230_20220512T082230.csv.gz,1.0,
+DE0007164600_20190718T090846_20190718T093846.csv.gz,1.0,
+DE0005140008_20220928T133657_20220928T140657.csv.gz,0.0,
+DE0006231004_20210127T153333_20210127T160333.csv.gz,1.0,
+DE0006231004_20190911T084745_20190911T091745.csv.gz,0.0,depends on slope
+DE0006599905_20220512T101535_20220512T104535.csv.gz,,
+DE000A1ML7J1_20220311T111143_20220311T114143.csv.gz,0.0,
+DE0005439004_20200316T082252_20200316T085252.csv.gz,0.0,
+DE0007664039_20200429T121419_20200429T124419.csv.gz,0.0,
+DE000A1EWWW0_20210310T101752_20210310T104752.csv.gz,0.0,
+DE0006599905_20200325T104550_20200325T111550.csv.gz,0.0,
+DE000A0D9PT0_20200313T082057_20200313T085057.csv.gz,1.0,
+DE000ZAL1111_20220826T145854_20220826T152854.csv.gz,,
